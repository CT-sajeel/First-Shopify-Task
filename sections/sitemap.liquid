{% liquid
  # Set default text width or use the section's width setting
  assign text_width = width | default: section.settings.width

  # Determine type of heading or body text based on font size setting
  if section.settings.font_size contains 'heading-lg' or section.settings.font_size contains 'heading-xl'
    assign type = 'display'
  elsif section.settings.font_size contains 'heading'
    assign type = 'heading'
  else
    assign type = 'body'
  endif

  # Check if the text is rich text or paragraph
  if section.settings.type_preset == 'rte' or section.settings.type_preset == 'paragraph'
    assign is_rte = true
  endif

  # Build classes for the text block
  capture text_block_classes
    if text_width == '100%'
      echo 'text-block--align-' | append: section.settings.alignment
      if section.settings.max_width == 'none'
        echo ' text-block--full-width '
      endif
    endif
    if section.settings.background
      echo ' text-block--background '
    endif
    if is_rte
      echo ' rte '
    endif
  endcapture
%}

{% capture attributes %}

  class="{{ class }} spacing-style text-block text-block--{{ section.id }} {{ section.settings.type_preset }}
    {{ text_block_classes }}"
  style="
    color: {{  section.settings.color }} !important; 
    width: {{ text_width }};
    max-width: {% if section.settings.max_width == 'narrow' %} 60% {% elsif section.settings.max_width == 'normal' %} 80% {% else %} 100% {% endif %};
    {% if text_width == "100%" %}
      text-align: {{ section.settings.alignment }};
    {% endif %}
    {% if section.settings.background %}
      background-color: {{ section.settings.background_color | default: 'rgb(255 255 255 / 1.0)' }};
      border-radius: {{ section.settings.corner_radius }}px;
      padding: max(var(--padding-2xs), calc((var(--text-corner-radius) + var(--padding-xs)) * (1 - cos(45deg))));
    {% endif %}
    margin:auto;
  "
  {{ section.shopify_attributes }}
{% endcapture %}

{% capture attributes_link %}
  
  class="{{ class }} spacing-style text-block text-block--{{ section.id }} {{ section.settings.type_preset_text }}
    {{ text_block_classes }}"
  style="
    text-decoration: {{  section.settings.underline_text }} !important;
    color: {{ section.settings.text_color }} !important;
    width: {{ text_width }};
    max-width: {% if section.settings.max_width == 'narrow' %} 60% {% elsif section.settings.max_width == 'normal' %} 80% {% else %} 100% {% endif %};
    {% if text_width == "100%" %}
      text-align: {{ section.settings.alignment_text }};
    {% endif %} 
    margin:auto; display:block;
  "
  {{ section.shopify_attributes_link }}
{% endcapture %}

<style>
  /* Custom padding based on section settings */
  .ct-top-padding { padding-top: {{ section.settings.padding-block-top }}px; }
  .ct-bottom-padding { padding-bottom: {{ section.settings.padding-block-bottom }}px; }
  .ct-right-padding { padding-right: {{ section.settings.padding-block-right }}px; }
  .ct-left-padding { padding-left: {{ section.settings.padding-block-left }}px; }

  /* Link list style */
  .link_style { list-style-type: {{section.settings.link_style }} !important; }
  .sitemap ul { padding:0px; }
</style>

{% liquid
  # Determine HTML element for heading/title
  assign element = 'div'
  if section.settings.type_preset == 'h1'
    assign element = 'h1'
  elsif section.settings.type_preset == 'h2'
    assign element = 'h2'
  elsif section.settings.type_preset == 'h3'
    assign element = 'h3'
  elsif section.settings.type_preset == 'h4'
    assign element = 'h4'
  elsif section.settings.type_preset == 'h5'
    assign element = 'h5'
  elsif section.settings.type_preset == 'h6'
    assign element = 'h6'
  elsif section.settings.type_preset == 'paragraph'
    assign element = 'p'
  else is_rte
    assign element = 'rte-formatter'
  endif
%}

{% liquid
  # Determine HTML element for link text
  assign element_text = 'div'
  if section.settings.type_preset_text == 'h1'
    assign element_text = 'h1'
  elsif section.settings.type_preset_text == 'h2'
    assign element_text = 'h2'
  elsif section.settings.type_preset_text == 'h3'
    assign element_text = 'h3'
  elsif section.settings.type_preset_text == 'h4'
    assign element_text = 'h4'
  elsif section.settings.type_preset_text == 'h5'
    assign element_text = 'h5'
  elsif section.settings.type_preset_text == 'h6'
    assign element_text = 'h6'
  elsif section.settings.type_preset_text == 'paragraph'
    assign element_text = 'p'
  else is_rte
    assign element_text = 'rte-formatter'
  endif
%}

{% comment %} 
  Main Sitemap Section 
{% endcomment %}
<section class="section page-width sitemap ct-top-padding ct-bottom-padding wt-page wt-page--compact">
  {%- for block in section.blocks -%}
    {%- case block.type -%}
      {%- when 'pages' -%}
        {% assign page_limit = block.settings.pages_gap %}
        <{{ element }} {{ attributes }}>
          {% if block.settings.title %} {{block.settings.title}} {% else %} Pages {% endif %}
        </{{ element }}>
        <div class="pages-sitemap">
          <ul>
            {% for page in pages limit: page_limit %}
              <li class="link_style"><a {{ attributes_link }} href="/pages/{{page.handle}}"><{{ element_text }}>{{page.title}}</{{ element_text }}></a></li>
            {% endfor %}
          </ul>
        </div>
      {%- when 'collections' -%}
        {% assign collection_limit = block.settings.collections_gap %}
        <{{ element }} {{ attributes }}>
          {% if block.settings.title %} {{block.settings.title}} {% else %} Collections {% endif %}
        </{{ element }}>
        <div class="collections-sitemap"></div>
      {%- when 'products' -%}
        {% assign product_limit = block.settings.products_gap %}
        <{{ element }} {{ attributes }}>
          {% if block.settings.title %} {{block.settings.title}} {% else %} Products {% endif %}
        </{{ element }}>
        <div class="products-sitemap"></div>
      {%- when 'blogs' -%}
        {% assign blog_limit = block.settings.blogs_gap %}
        <{{ element }} {{ attributes }}>
          {% if block.settings.title %} {{block.settings.title}} {% else %} Blogs {% endif %}
        </{{ element }}>
        <div class="blogs-sitemap"></div>
    {%- endcase -%}
  {%- endfor -%}
</section>

<script>
  // Shopify GraphQL config
  const SHOPIFY_DOMAIN = 'moxologie1.myshopify.com';
  const STOREFRONT_ACCESS_TOKEN = '4648ab1cb4b278f3459fabc3b835da99';
  const apiUrl = `https://${SHOPIFY_DOMAIN}/api/2025-07/graphql.json`;

  // Helper function to fetch data from Shopify Storefront API
  async function shopifyFetch(query, variables = {}) {
    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Storefront-Access-Token': STOREFRONT_ACCESS_TOKEN
        },
        body: JSON.stringify({ query, variables })
      });
      return await response.json();
      console.log('successfull');
    } catch (error) {
      console.error('Error:', error);
      return { errors: [{ message: error.message }] };
    }
  }

  // Fetch all collections and append to collections-sitemap
  async function GetAllCollections() {
    console.log("Loading: GetAllCollection");
    const query = `query GetCollections {
      collections(first: {{collection_limit}}) {
        nodes { id title handle }
      }
    }`;
    const variables = {};
    const fetchResult = await shopifyFetch(query, variables);
    const collections = fetchResult.data.collections.nodes;

    var collection_list = ``;
    collections.forEach((n) => {
      collection_list += `<li class="link_style"><a {{ attributes_link }} href="/collections/${n.handle}"><{{ element_text }}>${n.title}</{{ element_text }}></a></li>`;
    });

    var ulElement = document.createElement('ul');
    ulElement.innerHTML = collection_list;
    document.querySelector('.collections-sitemap').appendChild(ulElement);
  }

  // Fetch all products and append to products-sitemap
  async function GetRangeProducts() {
    console.log("Loading: GetAllProducts");
    const query = `query GetProducts {
      products(first: {{product_limit}}) {
        nodes { id title handle }
      }
    }`;
    const variables = {};
    const fetchResult = await shopifyFetch(query, variables);
    const products = fetchResult.data.products.nodes;

    var product_list = ``;
    products.forEach((n) => {
      product_list += `<li class="link_style"><a {{ attributes_link }} href="/products/${n.handle}"><{{ element_text }}>${n.title}</{{ element_text }}></a></li>`;
    });

    var ulElement = document.createElement('ul');
    ulElement.innerHTML = product_list;
    document.querySelector('.products-sitemap').appendChild(ulElement);
  }

  // Fetch all blog posts and append to blogs-sitemap
  async function GetAllBlogPosts() {
    console.log("Loading: GetAllBlogs");
    const query = `query GetBlogs{
      blogs(first: {{blog_limit}}) {
        nodes { id title handle }
      }
    }`;
    const variables = {};
    const fetchResult = await shopifyFetch(query, variables);
    const blogs = fetchResult.data.blogs.nodes;

    var blog_list = ``;
    blogs.forEach((n) => {
      blog_list += `<li class="link_style"><a {{ attributes_link }} href="/blogs/${n.handle}"><{{ element_text }}>${n.title}</{{ element_text }}></a></li>`;
    });

    var ulElement = document.createElement('ul');
    ulElement.innerHTML = blog_list;
    document.querySelector('.blogs-sitemap').appendChild(ulElement);
  }

  // Fetch all products with pagination for large stores
  async function GetAllProducts(product_limit) {
    console.log("Loading: GetAllProducts");
    let hasNextPage = true;
    let endCursor = null;
    let allProducts = [];

    while (hasNextPage && allProducts.length < product_limit) {
      const batchSize = Math.min(250, product_limit - allProducts.length);
      const query = `
        query GetProducts($cursor: String) {
          products(first: ${batchSize}, after: $cursor) {
            nodes { id title handle }
            pageInfo { hasNextPage endCursor }
          }
        }
      `;
      const variables = { cursor: endCursor };
      const fetchResult = await shopifyFetch(query, variables);
      const products = fetchResult.data.products.nodes;
      allProducts = allProducts.concat(products);

      hasNextPage = fetchResult.data.products.pageInfo.hasNextPage;
      endCursor = fetchResult.data.products.pageInfo.endCursor;
    }

    var product_list = ``;
    allProducts.forEach((n) => {
      product_list += `<li class="link_style"><a {{ attributes_link }} href="/products/${n.handle}"><{{ element_text }}>${n.title}</{{ element_text }}></a></li>`;
    });

    var ulElement = document.createElement('ul');
    ulElement.innerHTML = product_list;
    document.querySelector('.products-sitemap').appendChild(ulElement);
  }

  // Initialize fetching if sitemap divs exist
  if (document.querySelector('.products-sitemap')) {
    let product_limit = 0;
    {% for block in section.blocks %}
      {% if block.type == 'products' %}
        product_limit = {{ block.settings.products_gap | json }};
      {% endif %}
    {% endfor %}
    GetAllProducts(product_limit);
  }
  if (document.querySelector('.collections-sitemap')) {
       GetAllCollections();
  }
  if (document.querySelector('.blogs-sitemap')) {
      GetAllBlogPosts();
  }
</script>
